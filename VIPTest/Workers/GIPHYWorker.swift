//
//  GIPHYWorker.swift
//  VIPTest
//
//  Created by Архип on 10/22/17.
//  Copyright (c) 2017 KoshelGROUP. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class GIPHYWorker
{
    var giphyStore: GIPHIESStoreProtocol
        
        init(giphyStore: GIPHIESStoreProtocol)
        {
            self.giphyStore = giphyStore
            
        }
        
        func fetchGIPHIES(completionHandler: @escaping ([GIPHY]) -> Void)
        {
            self.giphyStore.fetchGIPHIES { (giphies: () throws -> [GIPHY]) -> Void in
                do {
                    let giphies = try giphies()
                    DispatchQueue.main.async {
                        completionHandler(giphies)
                    }
                } catch {
                    DispatchQueue.main.async {
                        completionHandler([])
                    }
                }
            }
        }
        
        func createGIPHY(giphyToCreate: GIPHY, completionHandler: @escaping (GIPHY?) -> Void)
        {
            
            giphyStore.createGIPHY(giphyToCreate: giphyToCreate) { (giphy: () throws -> GIPHY?) -> Void in
                do {
                    let giphy = try giphy()
                    DispatchQueue.main.async {
                        
                        completionHandler(giphy)
                    }
                } catch {
                    DispatchQueue.main.async {
                        completionHandler(nil)
                    }
                }
            }
        }
    
    }
    
    // MARK: - Giphies store API
    
    protocol GIPHIESStoreProtocol
    {
        // MARK: CRUD operations - Optional error
        
        func fetchGIPHIES(completionHandler: @escaping ([GIPHY], GIPHIESStoreError?) -> Void)
        func fetchGIPHY(id: String, completionHandler: @escaping (GIPHY?, GIPHIESStoreError?) -> Void)
        func createGIPHY(giphyToCreate: GIPHY, completionHandler: @escaping (GIPHY?, GIPHIESStoreError?) -> Void)

        
        // MARK: CRUD operations - Generic enum result type
        
        func fetchGIPHIES(completionHandler: @escaping GIPHIESStoreFetchGiphiesCompletionHandler)
        func fetchGIPHY(id: String, completionHandler: @escaping GIPHIESStoreFetchGiphyCompletionHandler)
        func createGIPHY(giphyToCreate: GIPHY, completionHandler: @escaping GIPHIESStoreCreateGiphyCompletionHandler)

        
        // MARK: CRUD operations - Inner closure
        
        func fetchGIPHIES(completionHandler: @escaping (() throws -> [GIPHY]) -> Void)
        func fetchGIPHY(id: String, completionHandler: @escaping (() throws -> GIPHY?) -> Void)
        func createGIPHY(giphyToCreate: GIPHY, completionHandler: @escaping (() throws -> GIPHY?) -> Void)

    }
    
    protocol GIPHIESStoreUtilityProtocol {}
    
    extension GIPHIESStoreUtilityProtocol
    {
        func generateGIPHYID(giphy: inout GIPHY)
        {
            guard giphy.id == nil else { return }
            giphy.id = "\(arc4random())"
        }
    }
    
    // MARK: - Giphies store CRUD operation results
    
    typealias GIPHIESStoreFetchGiphiesCompletionHandler = (GIPHIESStoreResult<[GIPHY]>) -> Void
    typealias GIPHIESStoreFetchGiphyCompletionHandler = (GIPHIESStoreResult<GIPHY>) -> Void
    typealias GIPHIESStoreCreateGiphyCompletionHandler = (GIPHIESStoreResult<GIPHY>) -> Void
    typealias GIPHIESStoreUpdateGiphyCompletionHandler = (GIPHIESStoreResult<GIPHY>) -> Void
    typealias GIPHIESStoreDeleteGiphyCompletionHandler = (GIPHIESStoreResult<GIPHY>) -> Void
    
    enum GIPHIESStoreResult<U>
    {
        case Success(result: U)
        case Failure(error: GIPHIESStoreError)
    }
    
    // MARK: - Giphys store CRUD operation errors
    
    enum GIPHIESStoreError: Equatable, Error
    {
        case CannotFetch(String)
        case CannotCreate(String)
        case CannotUpdate(String)
        case CannotDelete(String)
    }
    
    func ==(lhs: GIPHIESStoreError, rhs: GIPHIESStoreError) -> Bool
    {
        switch (lhs, rhs) {
        case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
        case (.CannotCreate(let a), .CannotCreate(let b)) where a == b: return true
        case (.CannotUpdate(let a), .CannotUpdate(let b)) where a == b: return true
        case (.CannotDelete(let a), .CannotDelete(let b)) where a == b: return true
        default: return false
        }
}

